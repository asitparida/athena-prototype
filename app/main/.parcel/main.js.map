{"version":3,"sources":["helpers/dock.ts","helpers/ipc-helper.ts","helpers/annotator.ts","helpers/tray.ts","helpers/screen.ts","../api/app.ts","../api/server.ts","helpers/splash.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"..","sourcesContent":["import { app, Menu} from 'electron';\nexport function BuildMenu() {\n    const dockMenu = Menu.buildFromTemplate([\n        { label: 'All Clips' },\n        {\n            label: 'Workspace',\n            submenu: [\n                { label: 'Workspace #1' },\n                { label: 'Workspace #2' },\n                { label: 'Workspace #3' }\n            ]\n        }\n    ])\n    app.dock.setMenu(dockMenu);\n    app.dock.show();\n}\n","export function GetIpcFileFixUrl() {\n    const splits = __dirname.split('/');\n    const file = splits.splice(0, splits.length - 2).join('/') + '/electron-ipc.js';\n    return file;\n}\n","import { BrowserWindow } from 'electron';\nimport { format } from 'url';\nimport { GetIpcFileFixUrl } from './ipc-helper';\nconst { resolve } = require('app-root-path');\nconst isDev = require('electron-is-dev');\n\nexport function BuildAnnotator() {\n    const window = new BrowserWindow({\n        // parent: mainWindow,\n        width: 300,\n        height: 200,\n        show: false,\n        transparent: true,\n        // resizable: false,\n        fullscreenable: false,\n        vibrancy: 'ultra-dark',\n        alwaysOnTop: true,\n        skipTaskbar: true,\n        frame: false,\n        webPreferences: {\n            webSecurity: false,\n            scrollBounce: true,\n            nodeIntegration: false,\n            preload: GetIpcFileFixUrl()\n        }\n    })\n    window.once('ready-to-show', () => {\n        window.show();\n        window.focus();\n        if (isDev && false) { window.webContents.openDevTools() }\n    });\n\n    const devPath = 'http://localhost:1125'\n    const prodPath = format({\n        pathname: resolve('app/widgets/annotator/.parcel/production/index.html'),\n        protocol: 'file:',\n        slashes: true\n    })\n    const url = isDev ? devPath : prodPath\n\n    window.setMenu(null)\n    window.loadURL(url)\n}\n","import { nativeImage, Tray, Menu, app, BrowserWindow } from 'electron';\nconst logo = require('../assets/network.png');\nimport { BuildAnnotator } from './annotator';\nlet tray: Tray = null;\nexport function BuildTray(win: BrowserWindow) {\n    const image = nativeImage.createFromPath(__dirname + logo);\n    image.resize({ width: 30, height: 30 });\n    tray = new Tray(image);\n    tray.setImage(image);\n    const onClick = () => {\n        const isVisible = win.isFocused();\n        if (!isVisible) {\n            win.focus();\n        }\n    };\n    const contextMenu = Menu.buildFromTemplate([\n        { label: 'New Note', click: () => {\n            BuildAnnotator();\n        }  },\n        { label: 'All Clips', click: onClick },\n        { label: 'Workspace #1', click: onClick  },\n        { label: 'Workspace #2', click: onClick  },\n        { label: 'Workspace #3', click: onClick  }\n    ])\n    tray.setContextMenu(contextMenu)\n}\n","import { screen } from 'electron';\nimport * as _ from 'lodash';\n\nexport function GetExternalDisplay() {\n  const displays = screen.getAllDisplays()\n  const externalDisplays = displays.filter((display) => {\n    return display.bounds.x !== 0 || display.bounds.y !== 0\n  });\n}\nconst onMainWindowMoved = (mainWindow) => {\n  const winBounds = mainWindow.getBounds();\n  const whichScreen = screen.getDisplayNearestPoint({ x: winBounds.x, y: winBounds.y });\n  mainWindow.setBounds(whichScreen.bounds, true);\n}\nexport const onMovedDebounced = _.debounce(onMainWindowMoved, 200);\n","const express = require('express');\nconst cors = require('cors');\nimport * as bodyParser from 'body-parser';\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\napp.use(bodyParser.json());\n\nfunction GetQueryParams(req: any) {\n    const params: any = {};\n    if (req.query) {\n        // tslint:disable-next-line:forin\n        for (const prop in req.query) {\n            params[prop] = req.query[prop];\n        }\n    }\n    return params;\n}\napp.get('/api/meta/', (req, res) => {\n    res.json({ data: 'AWESOME'});\n});\n\nexport default app;\n","import app from './app';\nconst helmet = require('helmet');\nconst compression = require('compression');\n\nconst net = require('net');\nfunction GetAvailablePort(startingAt) {\n\n    function GetNextAvailablePort(currentPort, cb) {\n        const server = net.createServer()\n        server.listen(currentPort, () => {\n            server.once('close', () => {\n                cb(currentPort)\n            })\n            server.close()\n        })\n        server.on('error', () => {\n            GetNextAvailablePort(++currentPort, cb)\n        })\n    }\n\n    return new Promise((resolve, reject) => {\n        GetNextAvailablePort(startingAt, resolve)\n    })\n}\n\nexport async function GetAPIServer() {\n    app.use(helmet()); // set well-known security-related HTTP headers\n    app.use(compression());\n    app.disable('x-powered-by');\n    const port = await GetAvailablePort(1000);\n    const server = app.listen(port, () =>\n        console.log('Starting ExpressJS API server on Port 8081'));\n    return { server: app, API_PORT: port };\n}\n","import { BrowserWindow } from 'electron';\nimport { format } from 'url';\nconst { resolve } = require('app-root-path')\n\nlet splashWindow;\n\nexport function GetSplashWindow() {\n    splashWindow = new BrowserWindow({\n        title: 'Project Athena',\n        width: 300,\n        height: 300,\n        show: true,\n        transparent: true,\n        resizable: false,\n        fullscreenable: false,\n        titleBarStyle: 'customButtonsOnHover',\n        maximizable: false,\n        minimizable: false,\n        closable: false,\n        alwaysOnTop: true,\n        frame: false\n    });\n    const prodPath = format({\n        pathname: resolve('build/splash.html'),\n        protocol: 'file:',\n        slashes: true\n    })\n    const url = prodPath\n    splashWindow.loadURL(url);\n    return splashWindow;\n}\n","import { BuildMenu } from './helpers/dock';\nimport { BuildTray } from './helpers/tray';\nimport { GetExternalDisplay, onMovedDebounced } from './helpers/screen';\nimport * as _ from 'lodash';\n\nimport { format } from 'url';\nimport { BuildAnnotator } from './helpers/annotator';\nimport { GetIpcFileFixUrl } from './helpers/ipc-helper';\nimport { GetAPIServer } from '../api/server';\nimport { GetSplashWindow } from './helpers/splash';\nconst electron = require('electron');\nconst { BrowserWindow, app } = electron;\nconst isDev = require('electron-is-dev')\nconst { resolve } = require('app-root-path')\n\napp.on('ready', async () => {\n    BuildMenu();\n    app.setName('Project Athena');\n    const splashWindow = GetSplashWindow();\n    const size = electron.screen.getPrimaryDisplay().size;\n    const mainWindow = new BrowserWindow({\n        title: 'Project Athena',\n        width: size.width,\n        height: size.height - 22,\n        show: false,\n        transparent: true,\n        resizable: false,\n        fullscreenable: false,\n        titleBarStyle: 'hidden',\n        vibrancy: 'ultra-dark',\n        webPreferences: {\n            webSecurity: false,\n            scrollBounce: true,\n            nodeIntegration: false,\n            preload: GetIpcFileFixUrl()\n        }\n    })\n    BuildTray(mainWindow);\n    mainWindow.once('ready-to-show', () => {\n        setTimeout(() => {\n            splashWindow.destroy();\n            setTimeout(() => {\n                mainWindow.show();\n            }, 30);\n        }, 2000);\n        if (isDev && false) { mainWindow.webContents.openDevTools() }\n    });\n    mainWindow.on('move', onMovedDebounced.bind(this, mainWindow))\n\n    const devPath = 'http://localhost:1124'\n    const prodPath = format({\n        pathname: resolve('app/renderer/.parcel/production/index.html'),\n        protocol: 'file:',\n        slashes: true\n    })\n    const url = isDev ? devPath : prodPath\n\n    mainWindow.setMenu(null)\n    mainWindow.loadURL(url)\n    electron.ipcMain.on('launch-annotator', () => {\n        BuildAnnotator();\n    });\n    const server: any = await GetAPIServer();\n    // tslint:disable-next-line:no-string-literal\n    mainWindow['API_PORT'] = server.API_PORT;\n})\napp.on('window-all-closed', app.quit)\n"]}