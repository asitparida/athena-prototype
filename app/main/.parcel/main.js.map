{"version":3,"sources":["dock.ts","main.ts"],"names":[],"mappings":";;;;;;AAAA,ACAA,MDAA,ACAA,MAAA,GAAA,CDAA,GAAA,GCAA,CAAA,GDAA,CAAA,ICAA,CAAA,KDAA,CAAA;;AACA,ACCA,MAAM,GDDU,SAAhB,GAAyB;AACrB,ACAI,EAAA,MDAE,QAAQ,GAAG,UAAA,CAAA,IAAA,CAAK,iBAAL,CAAuB,CACpC;AAAE,ACDJ,IDCI,ACDS,KDCJ,EAAE,ACDS,CAAC,KAAD,CAA1B;ADCQ,GADoC,EAEpC;AACI,ACFZ,IDEY,ECFN,GDEW,EAAE,GCFL,GAAG,KDCT,ECDgB,CAAC,UAAD,CAAxB;ADGY,IAAA,OAAO,EAAE,CACL;AAAE,ACHlB,MDGkB,ACHZ,KDGiB,EAAE;AAAT,ACHR,EAAA,GDEa,EAEL,QCJV;ADIY,ACJK,EAAA,IDIL,KAAK,EAAE;AAAT,ACJV,IAAyB,CDEV,EAGL,KCLhB;ADKkB,MAAA,KAAK,EAAE;AAAT,ACJhB,KDCqB,CCDf,KAAK,GAAG,OAAO,CAAC,iBAAD,CAArB;ADDQ,GAFoC,CAAvB,CAAjB;AAWA,ACPJ,EDOI,ICPE,MDOF,CAAA,GAAA,CAAI,IAAJ,CAAS,OAAT,CAAiB,QAAjB;AACA,ACRI,EDQJ,ACRI,UDQJ,CAAA,GAAA,CAAI,IAAJ,CAAS,IAAT;AACH,ACTK,IAAc,OAAO,CAAC,eAAD,CAA3B;;ADLA,ACOA,GAAG,CAAC,EAAJ,CDPA,ACOO,CDPP,MCOA,EAAgB,CDPhB,GAAA,QCO2B,CDP3B;ACQE,EAAA,MAAA,CAAA,SAAA;AACA,EAAA,GAAG,CAAC,OAAJ,CAAY,kBAAZ;AACA,QAAM,IAAI,GAAG,QAAQ,CAAC,MAAT,CAAgB,iBAAhB,GAAoC,IAAjD;AACA,QAAM,UAAU,GAAG,IAAI,aAAJ,CAAkB;AACnC,IAAA,KAAK,EAAE,IAAI,CAAC,KADuB;AAEnC,IAAA,MAAM,EAAE,IAAI,CAAC,MAFsB;AAGnC,IAAA,IAAI,EAAE,KAH6B;AAInC,IAAA,WAAW,EAAE,IAJsB;AAKnC,IAAA,SAAS,EAAE,KALwB;AAMnC,IAAA,cAAc,EAAE,KANmB;AAOnC,IAAA,aAAa,EAAE,QAPoB;AAQnC,IAAA,QAAQ,EAAE,YARyB;AASnC,IAAA,cAAc,EAAE;AACd,MAAA,WAAW,EAAE;AADC;AATmB,GAAlB,CAAnB;AAcA,EAAA,UAAU,CAAC,IAAX,CAAgB,eAAhB,EAAiC,MAAK;AACpC,IAAA,UAAU,CAAC,IAAX;;AACA,QAAI,KAAK,IAAI,KAAb,EAAoB;AAAE,MAAA,UAAU,CAAC,WAAX,CAAuB,YAAvB;AAAuC;AAC9D,GAHD;AAKA,QAAM,OAAO,GAAG,uBAAhB;AACA,QAAM,QAAQ,GAAG,MAAM,CAAC;AACtB,IAAA,QAAQ,EAAE,OAAO,CAAC,4CAAD,CADK;AAEtB,IAAA,QAAQ,EAAE,OAFY;AAGtB,IAAA,OAAO,EAAE;AAHa,GAAD,CAAvB;AAKA,QAAM,GAAG,GAAG,KAAK,GAAG,OAAH,GAAa,QAA9B;AAEA,EAAA,UAAU,CAAC,OAAX,CAAmB,IAAnB;AACA,EAAA,UAAU,CAAC,OAAX,CAAmB,GAAnB;AACD,CAjCD;AAkCA,GAAG,CAAC,EAAJ,CAAO,mBAAP,EAA4B,GAAG,CAAC,IAAhC","file":"main.js","sourceRoot":"..","sourcesContent":["import { app, Menu} from 'electron';\nexport function BuildMenu() {\n    const dockMenu = Menu.buildFromTemplate([\n        { label: 'All Clips' },\n        {\n            label: 'Workspace',\n            submenu: [\n                { label: 'Workspace #1' },\n                { label: 'Workspace #2' },\n                { label: 'Workspace #3' }\n            ]\n        }\n    ])\n    app.dock.setMenu(dockMenu);\n    app.dock.show();\n}","import { BuildMenu } from \"./dock\";\n\nconst { format } = require('url')\nconst electron = require('electron');\nconst { BrowserWindow, app } = electron;\nconst isDev = require('electron-is-dev')\nconst { resolve } = require('app-root-path')\n\napp.on('ready', async () => {\n  BuildMenu();\n  app.setName('Athena Prototype');\n  const size = electron.screen.getPrimaryDisplay().size\n  const mainWindow = new BrowserWindow({\n    width: size.width,\n    height: size.height,\n    show: false,\n    transparent: true,\n    resizable: false,\n    fullscreenable: false,\n    titleBarStyle: 'hidden',\n    vibrancy: 'ultra-dark',\n    webPreferences: {\n      webSecurity: false\n    }\n  })\n\n  mainWindow.once('ready-to-show', () => {\n    mainWindow.show()\n    if (isDev && false) { mainWindow.webContents.openDevTools() }\n  })\n\n  const devPath = 'http://localhost:1124'\n  const prodPath = format({\n    pathname: resolve('app/renderer/.parcel/production/index.html'),\n    protocol: 'file:',\n    slashes: true\n  })\n  const url = isDev ? devPath : prodPath\n\n  mainWindow.setMenu(null)\n  mainWindow.loadURL(url)\n})\napp.on('window-all-closed', app.quit)\n"]}