{"version":3,"sources":["helpers/dock.ts","helpers/ipc-helper.ts","helpers/annotator.ts","helpers/tray.ts","helpers/screen.ts","../api/helpers.ts","../api/app.ts","../api/server.ts","helpers/splash.ts","helpers/menu.ts","helpers/twilio.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"..","sourcesContent":["import { app, Menu} from 'electron';\nexport function BuildMenu() {\n    const dockMenu = Menu.buildFromTemplate([\n        { label: 'All Clips' },\n        {\n            label: 'Workspace',\n            submenu: [\n                { label: 'Workspace #1' },\n                { label: 'Workspace #2' },\n                { label: 'Workspace #3' }\n            ]\n        }\n    ])\n    app.dock.setMenu(dockMenu);\n    app.dock.show();\n}\n","export function GetIpcFileFixUrl() {\n    const splits = __dirname.split('/');\n    const file = splits.splice(0, splits.length - 2).join('/') + '/electron-ipc.js';\n    return file;\n}\n","import { BrowserWindow } from 'electron';\nimport { format } from 'url';\nimport { GetIpcFileFixUrl } from './ipc-helper';\nimport { API_PORT } from '../main';\nconst { resolve } = require('app-root-path');\nconst isDev = require('electron-is-dev');\n\nexport function BuildAnnotator() {\n    const window = new BrowserWindow({\n        width: 300,\n        height: 200,\n        show: false,\n        transparent: false,\n        fullscreenable: false,\n        minimizable: false,\n        maximizable: false,\n        vibrancy: 'light',\n        alwaysOnTop: true,\n        skipTaskbar: false,\n        frame: true,\n        webPreferences: {\n            webSecurity: false,\n            scrollBounce: true,\n            nodeIntegration: false,\n            preload: GetIpcFileFixUrl()\n        }\n    })\n    // tslint:disable:no-string-literal\n    window['API_PORT'] = API_PORT;\n    window.once('ready-to-show', () => {\n        window.setMaximizable(false);\n        window.setMinimizable(false);\n        window.show();\n        window.focus();\n        if (isDev && false) { window.webContents.openDevTools() }\n    });\n\n    const devPath = 'http://localhost:1125'\n    const prodPath = format({\n        pathname: resolve('app/widgets/annotator/.parcel/production/index.html'),\n        protocol: 'file:',\n        slashes: true\n    })\n    const url = isDev ? devPath : prodPath\n\n    window.setMenu(null)\n    window.loadURL(url);\n    return window;\n}\n","import { nativeImage, Tray, Menu, app, BrowserWindow } from 'electron';\nconst logo = require('../assets/owl.png');\nimport { BuildAnnotator } from './annotator';\nlet tray: Tray = null;\nexport function BuildTray(win: BrowserWindow) {\n    const image = nativeImage.createFromPath(__dirname + logo);\n    image.resize({ width: 30, height: 30 });\n    tray = new Tray(image);\n    tray.setImage(image);\n    const onClick = () => {\n        const isVisible = win.isFocused();\n        if (!isVisible) {\n            win.focus();\n        }\n    };\n    const contextMenu = Menu.buildFromTemplate([\n        { label: 'New Note', click: () => {\n            BuildAnnotator();\n        }  },\n        { label: 'All Clips', click: onClick },\n        { label: 'Workspace #1', click: onClick  },\n        { label: 'Workspace #2', click: onClick  },\n        { label: 'Workspace #3', click: onClick  }\n    ])\n    tray.setContextMenu(contextMenu)\n}\n","import { screen } from 'electron';\nimport * as _ from 'lodash';\n\nexport function GetExternalDisplay() {\n  const displays = screen.getAllDisplays()\n  const externalDisplays = displays.filter((display) => {\n    return display.bounds.x !== 0 || display.bounds.y !== 0\n  });\n}\nconst onMainWindowMoved = (mainWindow) => {\n  const winBounds = mainWindow.getBounds();\n  const whichScreen = screen.getDisplayNearestPoint({ x: winBounds.x, y: winBounds.y });\n  mainWindow.setBounds(whichScreen.bounds, true);\n}\nexport const onMovedDebounced = _.debounce(onMainWindowMoved, 200);\n","import { app as ElectronApp } from 'electron';\nimport * as fs from 'fs';\nexport function getLocalDBFile() {\n    const filePath = ElectronApp.getPath('userData') + '/elements.json';\n    if (!fs.existsSync(filePath)) {\n        fs.writeFileSync(filePath, JSON.stringify({}));\n    }\n    return filePath;\n}\n","const express = require('express');\nconst cors = require('cors');\nimport * as bodyParser from 'body-parser';\nimport { IStickyNote, IMms } from './api-types';\nconst low = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync');\nimport { app as ElectronApp } from 'electron';\nimport { getLocalDBFile } from './helpers';\nimport * as _ from 'lodash';\nconst adapter = new FileSync(getLocalDBFile())\nconst db = low(adapter);\n\ndb.defaults({ notes: [] })\n    .write();\ndb.set('notes', []).write();\ndb.set('mms', []).write();\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.urlencoded({\n    extended: true\n}));\napp.use(bodyParser.json());\n\nfunction GetQueryParams(req: any) {\n    const params: any = {};\n    if (req.query) {\n        // tslint:disable-next-line:forin\n        for (const prop in req.query) {\n            params[prop] = req.query[prop];\n        }\n    }\n    return params;\n}\napp.get('/api/meta/', (req, res) => {\n    res.json({ data: 'AWESOME' });\n});\napp.post('/api/stickies/', (req, res) => {\n    const sticky = req.body;\n    const collection = db.defaults({ posts: [] }).get('notes');\n    let notes = collection.value();\n    if (!sticky.id) {\n        sticky.id = `${Math.floor(Math.random() * 10e8)}`;\n    } else {\n        notes = notes.filter(note => note.id !== sticky.id);\n    }\n    db.set('notes', [].concat(...notes, sticky)).write();\n    res.json({ data: sticky });\n});\napp.get('/api/stickies/unassigned', (req, res) => {\n    const notes = db.get('notes')\n        .filter({ assigned: false })\n        .value();\n    res.json({ data: notes });\n});\napp.get('/api/mms/', (req, res) => {\n    const notes: IMms[] = db.get('mms')\n        .value();\n    res.json({ data: notes });\n})\napp.get('/api/mms/list', (req, res) => {\n    const mms: IMms[] = db.get('mms')\n        .value();\n    res.json({ data: mms.map(m => m.sid) });\n})\napp.post('/api/mms', (req, res) => {\n    const mms: IMms = req.body;\n    const collection = db.defaults({ posts: [] }).get('mms');\n    const mmsCollection: IMms[] = collection.value();\n    if (!_.find(mmsCollection, item => item.sid === mms.sid )) {\n        db.set('mms', [].concat(...mmsCollection, mms)).write();\n        res.json({ data: true });\n    } else {\n        res.json({ data: false });\n    }\n})\nexport default app;\n","import app from './app';\nconst helmet = require('helmet');\nconst compression = require('compression');\n\nconst net = require('net');\nfunction GetAvailablePort(startingAt) {\n\n    function GetNextAvailablePort(currentPort, cb) {\n        const server = net.createServer()\n        server.listen(currentPort, () => {\n            server.once('close', () => {\n                cb(currentPort)\n            })\n            server.close()\n        })\n        server.on('error', () => {\n            GetNextAvailablePort(++currentPort, cb)\n        })\n    }\n\n    return new Promise((resolve, reject) => {\n        GetNextAvailablePort(startingAt, resolve)\n    })\n}\n\nexport async function GetAPIServer() {\n    app.use(helmet()); // set well-known security-related HTTP headers\n    app.use(compression());\n    app.disable('x-powered-by');\n    const port = await GetAvailablePort(1000);\n    const server = app.listen(port, () =>\n        console.log('Starting ExpressJS API server on Port 8081'));\n    return { server: app, API_PORT: port };\n}\n","import { BrowserWindow } from 'electron';\nimport { format } from 'url';\nconst { resolve } = require('app-root-path')\n\nlet splashWindow;\n\nexport function GetSplashWindow() {\n    splashWindow = new BrowserWindow({\n        title: 'Element',\n        width: 300,\n        height: 300,\n        show: true,\n        transparent: true,\n        resizable: false,\n        fullscreenable: false,\n        titleBarStyle: 'customButtonsOnHover',\n        maximizable: false,\n        minimizable: false,\n        closable: false,\n        alwaysOnTop: true,\n        frame: false\n    });\n    const prodPath = format({\n        pathname: resolve('build/splash.html'),\n        protocol: 'file:',\n        slashes: true\n    })\n    const url = prodPath\n    splashWindow.loadURL(url);\n    return splashWindow;\n}\n","import { MenuItem, Menu, app,  BrowserWindow, dialog } from 'electron';\n\nexport function GetApplictaionMenu() {\n    const template = [\n        {\n            label: app.getName(), submenu: [\n                { label: 'New', accelerator: 'Command+R', click() { console.log('go!') } },\n                { label: 'Save', click() { console.log('go!') } },\n                { label: 'Sync', click() { console.log('go!') } },\n                { type: 'separator' },\n                { role: 'Quit' }\n            ]\n        },\n        {\n            label: 'Edit',\n            submenu: [{\n              label: 'Undo',\n              accelerator: 'CmdOrCtrl+Z',\n              role: 'undo'\n            }, {\n              label: 'Redo',\n              accelerator: 'Shift+CmdOrCtrl+Z',\n              role: 'redo'\n            }, {\n              type: 'separator'\n            }, {\n              label: 'Cut',\n              accelerator: 'CmdOrCtrl+X',\n              role: 'cut'\n            }, {\n              label: 'Copy',\n              accelerator: 'CmdOrCtrl+C',\n              role: 'copy'\n            }, {\n              label: 'Paste',\n              accelerator: 'CmdOrCtrl+V',\n              role: 'paste'\n            }, {\n              label: 'Select All',\n              accelerator: 'CmdOrCtrl+A',\n              role: 'selectall'\n            }]\n          },\n        {\n            label: 'View',\n            submenu: [{\n                label: 'Reload',\n                click: () => {\n                    app.relaunch();\n                    app.exit();\n                }\n            }, {\n                label: 'Toggle Full Screen',\n                accelerator: (() => {\n                    if (process.platform === 'darwin') {\n                        return 'Ctrl+Command+F'\n                    } else {\n                        return 'F11'\n                    }\n                })(),\n                click: (item, focusedWindow) => {\n                    if (focusedWindow) {\n                        focusedWindow.setFullScreen(!focusedWindow.isFullScreen())\n                    }\n                }\n            }, {\n                label: 'Toggle Developer Tools',\n                accelerator: (() => {\n                    if (process.platform === 'darwin') {\n                        return 'Alt+Command+I'\n                    } else {\n                        return 'Ctrl+Shift+I'\n                    }\n                })(),\n                click: (item, focusedWindow) => {\n                    if (focusedWindow) {\n                        focusedWindow.toggleDevTools()\n                    }\n                }\n            }, {\n                type: 'separator'\n            }, {\n                label: 'App Menu Demo',\n                click: (item, focusedWindow) => {\n                    if (focusedWindow) {\n                        const options = {\n                            type: 'info',\n                            title: 'Application Menu Demo',\n                            buttons: ['Ok'],\n                            message: 'This demo is for the Menu section, showing how to create a clickable menu item in the application menu.'\n                        }\n                        dialog.showMessageBox(focusedWindow, options)\n                    }\n                }\n            }]\n        },\n        {\n            label: 'Window',\n            submenu: [{\n                label: 'Close',\n                click: (item, focusedWindow: BrowserWindow) => {\n                    if (focusedWindow) {\n                        if (focusedWindow.id === 1) {\n                          BrowserWindow.getAllWindows().forEach(win => {\n                            if (win.id > 1) {\n                                 win.close()\n                            }\n                          })\n                        }\n                        focusedWindow.close();\n                      }\n                }\n            }]\n        }\n    ];\n    return Menu.buildFromTemplate(template as any);\n}\n","import * as _ from 'lodash';\nimport { SaveMedia } from \"../main\";\nconst TwilioAPI = require('twilio');\nconst extName = require('ext-name');\n\nlet client;\nlet twilioInterval;\nconst TwilioPingInterval = 10000;\n\nclass TwilioManager {\n    client = null;\n    initialize() {\n        const accountSid = 'AC90fba0e5a6ed99cd255ff123b538f952';\n        const authToken = '5eef95c80c2e25f2b2b839c564aae09d';\n        client = TwilioAPI(accountSid, authToken);\n        if (twilioInterval) {\n            clearInterval(twilioInterval);\n            twilioInterval = null;\n        }\n    }\n    startFetch() {\n        twilioInterval = setInterval(() => {\n            this.getMessages();\n        }, TwilioPingInterval);\n    }\n    cleanup() {\n        clearInterval(twilioInterval);\n        twilioInterval = null;\n    }\n    getMessages() {\n        if (client) {\n            client.messages.list({ limit: 20, to: '+14122148476', })\n                .then(messages => {\n                    console.log('TWILIO CALLED');\n                    messages.forEach(this.processMessage);\n                }, (error) => console.log);\n        }\n    }\n    processMessage(message) {\n        if (message && message.sid) {\n            if (_.startsWith(message.sid, 'MM')) {\n                // client.messages(message.sid).remove()\n                // .then(m => console.log(m.sid));\n                client.messages(message.sid).media\n                    .list({ limit: 10 })\n                    .then(media => media.forEach(m => {\n                        client.messages(message.sid).media(m.sid).fetch().then(data => {\n                            const uri = data.uri;\n                            const extension = extName.mime(data.contentType)[0].ext;\n                            const mediaUrl = 'https://api.twilio.com' + uri.replace('.json', '');\n                            SaveMedia(mediaUrl, _.isEmpty(message.body) ? null : message.body, message.sid, message.dateUpdated);\n                        }, (error) => console.log)\n                    }), (error) => console.log);\n            } else {\n                // client.messages(message.sid).remove()\n                // .then(m => console.log(m.sid));\n                SaveMedia(null, _.isEmpty(message.body) ? null : message.body, message.sid, message.dateUpdated);\n            }\n        }\n    }\n}\n\nexport const Twilio = new TwilioManager();\n","import { BuildMenu } from './helpers/dock';\nimport { BuildTray } from './helpers/tray';\nimport { onMovedDebounced } from './helpers/screen';\nimport * as _ from 'lodash';\nconst fetch = require('node-fetch');\nimport { format } from 'url';\nimport { BuildAnnotator } from './helpers/annotator';\nimport { GetIpcFileFixUrl } from './helpers/ipc-helper';\nimport { GetAPIServer } from '../api/server';\nimport { GetSplashWindow } from './helpers/splash';\nimport { GetApplictaionMenu } from './helpers/menu';\nimport { Twilio } from './helpers/twilio';\nconst electron = require('electron');\nconst { BrowserWindow, app, Menu, ipcMain, dialog } = electron;\nconst isDev = require('electron-is-dev')\nconst { resolve } = require('app-root-path');\nconst htmlToRtf = require('html-to-rtf');\nimport * as fs from 'fs';\n\nexport let API_PORT = null;\nexport const EnableTwilio = false;\nlet mainWindow;\n\napp.on('ready', async () => {\n    BuildMenu();\n    app.setName('Element');\n    const splashWindow = GetSplashWindow();\n    const size = electron.screen.getPrimaryDisplay().size;\n    mainWindow = new BrowserWindow({\n        title: 'Element',\n        width: size.width,\n        height: size.height - 22,\n        show: false,\n        transparent: true,\n        resizable: false,\n        fullscreenable: false,\n        titleBarStyle: 'hidden',\n        thickFrame: false,\n        webPreferences: {\n            webSecurity: false,\n            scrollBounce: true,\n            nodeIntegration: false,\n            preload: GetIpcFileFixUrl()\n        }\n    });\n    const menu = GetApplictaionMenu();\n    Menu.setApplicationMenu(menu);\n    BuildTray(mainWindow);\n    mainWindow.once('ready-to-show', () => {\n        setTimeout(() => {\n            splashWindow.destroy();\n            setTimeout(() => {\n                mainWindow.show();\n            }, 30);\n        }, 2000);\n        if (EnableTwilio) {\n            Twilio.initialize();\n            Twilio.startFetch();\n        }\n        if (isDev && false) { mainWindow.webContents.openDevTools() }\n    });\n    mainWindow.on('move', onMovedDebounced.bind(this, mainWindow))\n\n    const devPath = 'http://localhost:1124'\n    const prodPath = format({\n        pathname: resolve('app/renderer/.parcel/production/index.html'),\n        protocol: 'file:',\n        slashes: true\n    })\n    const url = isDev ? devPath : prodPath\n\n    mainWindow.setMenu(null)\n    mainWindow.loadURL(url)\n    electron.ipcMain.on('launch-annotator', () => {\n        BuildAnnotator();\n    });\n    const server: any = await GetAPIServer();\n    API_PORT = server.API_PORT;\n    // tslint:disable-next-line:no-string-literal\n    mainWindow['API_PORT'] = server.API_PORT;\n})\napp.on('window-all-closed', () => {\n    console.log('App Quit');\n    app.quit();\n})\nipcMain.on('export-composition', (event, arg) => {\n    if (!_.isEmpty(arg)) {\n        const options = {\n            title: 'Save Composition As',\n            filters: [\n                { name: 'Rich Text Format', extensions: ['rtf'] }\n            ]\n        };\n        dialog.showSaveDialog(options, (fileName) => {\n            fs.writeFile(fileName, htmlToRtf.convertHtmlToRtf(arg), (err) => {\n                if (err) {\n                    alert(\"An error ocurred updating the file\" + err.message);\n                    console.log(err);\n                    return;\n                }\n                console.log(\"The file has been succesfully saved\");\n            });\n        });\n    }\n})\n\nexport async function SaveMedia(mediaUrl, text, sid, modified) {\n    const data = {\n        mediaUrl,\n        text,\n        sid,\n        modified\n    };\n    const mmsPostUrl = `http://localhost:${API_PORT}/api/mms/`;\n    fetch(mmsPostUrl, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n    }).then(() => {\n        // mainWindow.webContents.send('new-mms-data');\n    }, console.log)\n}\n"]}